python -m venv env : this is for the creating python envi
.\env\Scripts\activate : this is for the activating the environment.
git init : this Initialized empty Git repository in D:/FASTAPI/.git/

after that create a folder with name backend , in it initialize the requirements with the text files
pip install -r requirements.txt

uvicorn main:app --reload : this reload the flag makes sure that every time we make some changes in the codebase, uvicorn reloads the application
here we are using uvicorn as the server.

git status : says us which are files will be pushed.
new repository on the command line:
echo "# FastAPI_Blog" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/VINEETH1425/FastAPI_Blog.git
git push -u origin main

‚Ä¶or push an existing repository from the command line
git remote add origin https://github.com/VINEETH1425/FastAPI_Blog.git
git branch -M main
git push -u origin main



fatal: the requested upstream branch 'origin/main' does not exist

 Step 1: Fetch remote branches
bash
Copy code
git fetch --all
This updates your local metadata about what branches exist on the remote.

üîπ Step 2: Check available branches
bash
Copy code
git branch -r
This will list all remote branches, like:

bash
Copy code
origin/master
origin/main
origin/dev
üîπ Step 3: Set upstream to the correct remote branch
If your remote has origin/master, use:

bash
Copy code
git branch --set-upstream-to=origin/master main
If it has origin/main, use:

bash
Copy code
git branch --set-upstream-to=origin/main main
‚úÖ OR: Shortcut for new branch
If your branch is new and you want to push and set upstream in one step:

bash
Copy code
git push -u origin main
This:

Pushes the main branch

Sets origin/main as the upstream

Lets you use git pull / git push without extra arguments in the future

fatal: refusing to merge unrelated histories
This means your local Git repository and the remote repository have different roots, i.e., Git thinks they are totally unrelated projects.

This typically happens when:

You created the local repo separately (e.g., with git init)

Then later added a remote (e.g., with git remote add origin <url>)

And both have commits that are unrelated

‚úÖ How to Fix
If you're sure you want to merge the remote repository into your current one (despite different histories), you can use the --allow-unrelated-histories flag:

bash
Copy code
git pull origin main --allow-unrelated-histories
Replace main with master or your actual remote branch name, if different.

üîÅ After merging:
You might get merge conflicts if files clash ‚Äî Git will show you what to fix.

Once resolved:

bash
Copy code
git add .
git commit -m "Resolved merge conflicts"
Then continue working as usual.


üí° Pro Tip (if you want a clean sync instead):
If you want to replace your local repo with the remote repo cleanly (i.e., wipe local and start fresh), you can:

‚ö†Ô∏è Warning: this deletes local changes

bash
Copy code
rm -rf .git
git init
git remote add origin <repo-url>
git fetch
git checkout -t origin/main